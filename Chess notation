# Define constants for the board dimensions
FILES = 8
RANKS = 8

def generate_bishop_moves(square):
    rank = square // FILES
    file = square % FILES

    # Define masks for each diagonal and anti-diagonal
    main_diag_mask = 0x8040201008040201
    anti_diag_mask = 0x0102040810204080

    # Shift the masks to the correct rank and file
    main_diag_mask <<= 8 * rank
    anti_diag_mask <<= 8 * (RANKS - rank - 1)
    main_diag_mask <<= file
    anti_diag_mask >>= file

    # Combine masks for all diagonal directions
    diagonal_mask = main_diag_mask | anti_diag_mask

    # Remove the square itself
    moves = diagonal_mask & ~(1 << square)

    return moves

# Example usage:
square = 27  # Example square: D4 (in 0-based index)
bishop_moves = generate_bishop_moves(square)

# Print the binary representation of the bishop moves
print(bin(bishop_moves))
